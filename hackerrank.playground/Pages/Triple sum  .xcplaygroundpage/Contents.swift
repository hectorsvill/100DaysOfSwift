//: [Previous](@previous)

// https://www.hackerrank.com/challenges/triple-sum/problem

import Foundation
func getNumArray(str: String) -> [Int]{
    var num_list: [Int] = []
    
    _ = Array(str).map {
        if let n = Int(String($0)) {
            num_list.append(n)
        }
    }
    return num_list
}


// p <= q and q >= r

func triplets(a: [Int], b: [Int], c: [Int]) -> Int {
    var dTripplets: [[Int]] = []
    let setA = Set(a).sorted()
    let setB = Set(b).sorted()
    let setC = Set(c).sorted()
    
    for p in setA {
        for q in setB {
            for r in setC {
                if p <= q && q >= r {
                    dTripplets.append([p,q,r])
                }
            }
        }
        break 
    }
    
    print(dTripplets.count)
    return dTripplets.count
}






// return 8
//let p = [1, 3, 5]
//let q  = [2, 3]
//let r = [1, 2, 3,]

// return 5
let p = [1, 4, 5]
let q  = [2, 3, 3]
let r = [1, 2, 3,]


//10372982
//let p = "93412698 31384984 65661008 86271614 3436567 25211016 36052009 67863214 51818391 7419944 60519288 78753395 86837987 34644058 75859786 63870949 61524763 90437038 76943128 688632 47899344 24163053 30954626 39165361 10268453 57941134 7177992 68969169 66031044 25210609 53474059 59760811 49899333 49667365 57462254 22082515 28247701 28764624 82318441 78237461 35948590 15196079 68394955 39607378 69173856 17639 67119123 31452786 835088 44185429 69173500 27094084 83888634 78787521 7696592 57912904 1720610 35993872 16302490 37815918 29241359 90738848 24881663 57693166 56158950 91928842 37349338 30036609 49395093 76065805 29138872 17292645 12348223 33102819 43668812 62652298 37139011 25076942 32724673 43524953 8638863 93795955 56900620 83443021 85844528 59641313 67783402 63013038 70142528 75154631 29929059 60511131 81340551 95959447 72727789 13557149 77539345 49798635 66079440 58590757 57838374 35792948 81255571 85819481 52096512 18663773 5914375 16382300 58493059 60444938 45728836 59876533 79091028 20790836 6151401 61353883 43287230 80944491 18871992 72861635 8218156 75077106 17823246 43102770 17356650 20258807 24633915 35914468 31047638 39575147 71134238 86617835 22215779 53084683 68201114 91772985 6153478 49524624 60876861 65208727 95620857 37116952 25598225 88214069 9282206 67802067 69178624 66919947 20175061 14661028 48074585 91154466 49076524 54024756 25628359 94219807 89859831 2288517 1509872 47952728 50089589 28091343 22646751 90944819 73277067 49647147 74373168 51940968 31908649 68101093 35867832 98562106 86230552 31450100 83920145 98722684"
//let q  = "50674123 23672774 12469771 41886943 55713754 52612785 13938538 62012873 58677714 76697553 11769066 20974389 81491245 71209420 28204159 32045208 85410031 20731242 66030315 24678814 86509627 6570825 61750552 59438043 66080495 14219701 88689752 97695751 86002507 87429837 1395910 76253004 83144629 9083176 22923533 44615943 32753002 73055337 46829185 42450603 9285586 79483072 28564896 48539402 25275698 20615303 78684229 88748514 39207480 47688024 72324444 80917797 18525741 43865170 34261991 1724344 29668720 8405711 50011597 64910700 20341439 91474725 31730308 85915167 33073595 51921766 40819806 87665035 15535470 21312108 83892170 61970817 39948335 97881664 70099744 86198749 78830584 98992890 79160382 60541546 42592051 16039473 38039144 15500020 47279774 78388811 89009819 46068294 43210398 83329042 34360096 18461738 83040798 21038895 91599935 80704298 74072303 46779639 6230979 34274923 23150267 68367602 82452504 24741927 17413306 24573070 59456968 69724632 54797766 93783262 79449091 94131648 44950853 22931047 46331211 70806055 99826743 82461947 83611660 9584311 74652393 99810204 82308670 43063587 90947968 32028146 24105915 75850025 67807050 24760790 75481511 36919585 50039510 59500548 5566517 53563151 2517908 10550063 98043720 1302852 42609920 36179948 656282 91371457 98799724 48958649 86600333 52035170 61279076 4689620 64403288 96798331 26149789 43551130 59208543 38256528 86609166 83642141 73643070 37587491 58216243 273571 11154318 16649854 41070858 8190174 3049260 70791800 44850033 80776114 46618391 23996435 40635951 92461690 80019352 76429778 68753221 48684166 42575323 77918572 13490251 85857675 15245542 81296768 83592230 69066444 3939513 86046787 78143909 98653722 34917282 26856241 13536215 75777306 85294503 14206466 28469445 7481591 51885236 89775475 10946210 68246863 82081102 39967680 72482287 69409492 43191366 61821757 6945615 94574373 73111401 26307612 31630889 86525878 60139630 74911383 5607416 65943759 21015407 73329576 62992690 72758634 83145139 71503345 68737304 51962000 24868886 55525245 62744803 26248621 14102296 6528468 8768806 35978321 33992409 78093037 69199433 46942359 44831863 77279741 79093897 23356186 84483355 64557076 74496860 79073780 95044 80462233 94168040 14630344 74481305 95513321 51131670 9734304 8256268 14479138 68030845 76428288 25999612 72998382 53980522 30990532 57191427 41003756 91786958 89677297 93751044 4404759 86687598 31686929 68929342 32087333 85892779 87181848 55544629 49950097 88691344 96301963 85779188 20142430 97459176 38923370 95136322 20416965 58521492 38382661 21986612 82507434 20079919 48678171 83817803 65096010 72574088 6649687 60808914 99726170 76179185 11277446 36879696 82528755 42550525 22579462 34633634 16707476 34215972 78817465 81007219 80468189 29268782 86734068 60330573 33986250 47567026 18872063 31200754"
//let r = "7124519 90487292 4265128 24476764 32320983 16602376 71164084 1071895 61829158 37646341 98686885 60729022 6246320 19459764 49780212 83936533 49366805 69135440 91545520 56078663 30739084 54382539 8296171 1146617 5306454 15864518 27524374 89169107 27139093 95501420 92892865 35048642 12007745 8312344 67941743 79078430 57820528 92782204 916380 93206660 34434355 99040600 50535165 34032057 95256718 99863138 9691739 47592655 30822077 7585449 26440681 79099733 6316 3260529 65496324 99674442 44887169 4266104 25473071 64764602 50962141 21905510 11916987 23662584 22245739 75389073 78699194 59481402 5193411 43262561 23915561 16117422 94865510 64261364 29503443 49288836 16016995 12017375 93247995 78347607 19627146 12702298 35840936 81404871 11598934 78080565 37667868 36764857 38166051 93231610 49713768 10011564 81705732 28924362 71181675 29280954 93495258 16728552 10383962 25349908 66631204 17840975 18839539 59546881 87462295 74167693 52852511 52289743 1981442 23235646 269387 67178673 83240396 71264401 42223844 35071913 32007911 99718759 71183999 3764114 71244287 51238078 43587844 96287044 15360097 55067003 99949684 33531626 29272831 78776217 38249176 53804276 30918411 61720831 50977436 8898876 18050478 24901185 11828666 54489714 87002197 38902103 60360824 31637661 27714767 73723848 20139726 49671062 51078609 57543859 99265285 80333116 81344186 44293152 68121481 95505002 85877130 23252298 81376598 35848152 32248406 89724023 29265367 52648466 27323559 81301278 75017910 99787562 42974658 45468824 26762409 94815625 88102307 35657940 57603831 74088048 2233144 37370547 55389339 98737176 17988098 27900779 27159231 95855221 76640311 8672858 71746260 62812534 43700062 88631102 91420868 57432410 54137714 2134900 32789085 4912710 30322657 27133389 28924153 66955831 49475828 70140862 91658940 87821922 90213048 54712386 73905978 99458601 67018584 52801767 68090103 86486364 93605698 77065033 20777457 10313675 46478759 5393012 78543922 26984137 52364004 95439670 98957811 64419084 53180961 89242757 61050392 45374160 80890750 75851618 10742085 86968657 23002139 9502410 5882448 36978668 20354193 38437031 56462134 86448284 10370097 49632559 68932051 55718360 64242265 39784069 25628341 76615036 38310490 96466686 571463 78573910 44051758 27183030 97924681 68239960 63237203 342189 46934442 46490244 72738946 12057590 38208899 57642 55321752 5718963 68165025 92864718 79465142 42030730 15477964 46305556 96684291 46512891 42913151 68104238 95521248 83566250 26995276 50328787 4515308 4498345 52994489 67104367 89406358 94238017 22651894 16339610 18939271 16654367 63088335 99618631 25184891 47408315 40584900 19305348 17379269 26253047 89507368 90032283 11708515 55358479 23996697 96450632 75905251 89272467 33849591 61034073 15862887 91159459 7780099 471330 30955079 69243855 85177208 4643973 27828899 23068765 16858462 32948953 46424238 87050476 38727549 7003708 81908447 6569501 47906717 6525629 75821096 89431567 77261105 57017695 30278504 83493681 17130708 55595090 65999801 79174249 53217038 12170031 60866109 29329894 1034925 90157917 97875048 48728555 61214090 27879443 32973882 54875570 2319745 41639797 62811310 26203804 75134957 63281049 23034928 69723770 78145397 8182861 43442100 67871950 38933223 312561 37571795 58197528 13676434 77244781 36511675 59860589 66261018 46770349 34234787 9348075 31190239 4752419 18457103 76745816 25730263 26313783 82167702 25650188 37138647 32475820 24421131 55799978 97873263 79378157 91924850 24018409 15519062 26534348 17207328 28168337 48145503 41597884 51494662 8421988 42104571 10017137 26593616 38334414 60148493 15357396 4037063 9298673 12451425 29886542 90028908 40829655 22349565 42279404 95263789 81536813 42851440 55384830 94974222 76912134 90801810 18845459 72791603 80015616 99675860 8316203 92902115 35079390 48351108 44721071 46138318 15343167 43020846 45373737 80229150 71262196 84539690 64454331 99765233 39363312 88119928 64350925 99555134 28147817 87528721 81384977 53284651 43296652 80993755 54384449 96702436 87907580 57188310 63978188 89465921 46697181 32387749 74603882 95186558 19003514 81696723 1375628 83178549 12615467 68275157 50071449 26614083 27851219 94095024 42621529 15932510 94965448 54122966 98972614 697162 69409324 96409193 65910041 37108917 35030872 71735940 64629626 56145556 86256121 61179236 14719100 40876530 55889885 99365559 84665745 99958854 90122329 99322846 55795765 27574084 413600 85086332 37889281 86510675 81612232 56605076 29490354 39706654 40432001 98668869 29887972 79227529 49333705 10609378 7678899 88855034 60408702 48016097 21480158 40009459 97277490 85498845 54269544 81684603"




if triplets(a: p, b:  q, c: r) == 5 {
    print("🤩")
} else {
    print("🤮")
}




//: [Next](@next)
